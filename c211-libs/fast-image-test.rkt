#lang racket
(require rackunit
         "fast-image.rkt")

(define (cout . x)
  (if (null? x)
      x
      (and (display "\n")(display (car x))))
      (display "\n"))

(cout "Beginning tests...")
(define i (make-image 50 25 (color 0 0 0)))
(define ibl (make-image 200 100))
(define iclr (make-image 64 256 (lambda (r c) (color r c (quotient (+ r c) 2)))))
(define i256 (make-image 256 256 (lambda (r c) (color (random 256) (random 256) (random 256)))))

#|

(cout "Simple image creation")
(time (begin
(make-image 50 25 (color 0 0 0))
(make-image 200 100)
(make-image 64 256 (lambda (r c) (color r c (quotient (+ r c) 2))))
(make-image 256 256)
(void)
))

(cout "Big image creation")
(time (begin
(make-image 500 250 (color 0 0 50))
(make-image 2000 1000)
(make-image 640 2560 (lambda (r c) (color (min r 255) (min c 255) (min (max (- r c) (- c r)) 255))))
(make-image 2560 1600 (color 255 255 255))
(void)
))


(cout "Simple width and height")
(time (begin
(check = 50 (image-rows i) "make-image: Image width")
(check = 25 (image-cols i) "make-image: Image height")
(check = 50 (image-rows i) "make-image: Image width")
(check = 25 (image-cols i) "make-image: Image height")
))

(cout "Image mutation and reference")
(time
(test-begin
 (for ((r (in-range 0 (image-rows i))))
   (for ((c (in-range 0 (image-cols i))))
     (for ((band (in-range 0 3)))
       (check = (image-ref i r c band) (image-ref ibl r c band))
       (image-set! i r c band 5)
       (check (lambda (x y) (not (= x y)))
              (image-ref i r c band)
              (image-ref ibl r c band))
       (image-set! ibl r c band 5)
       (check = (image-ref i r c band) (image-ref ibl r c band))
       )))
 (check (lambda (x y) (not (image-equal? x y))) i ibl))
)

(cout "Color equality")
(time
 (test-begin
  (for ((i (in-range 0 256)))
    (for ((j (in-range 0 256)))
      (let ((r (if (zero? (random 2)) i j))
            (g (if (zero? (random 2)) i j))
            (b (if (zero? (random 2)) i j))
            (rr (if (zero? (random 2)) i j))
            (rg (if (zero? (random 2)) i j))
            (rb (if (zero? (random 2)) i j)))
        (check (lambda (x y) (not (xor x y)))
               (equal? (bytes r g b) (bytes rr rg rb))
               (color-equal? (color r g b) (color rr rg rb))))))))

(set! i (image-map (lambda (x) (color (random 256) (random 256) (random 256))) i)) 

(cout "Image and color mutation, referencing, and equality testing")
(time
 (test-begin
  (for ((count (in-range 0 2000)))
    (let* ((r (random 50)) (c (random 25)) (clr (image-ref i r c)) (img (image-map (lambda (x) x) i)))
      (let* ((band (random 3)) (newval (random 256)) (oldval (image-ref i r c band)))
        (image-set! i r c band newval)
        (check = oldval (color-ref clr band))
        (check (lambda (x y) (not (xor x y)))
               (color-equal? clr (image-ref i r c))
               (image-equal? img i))
        (color-set! clr band newval)
        (check color-equal? clr (image-ref i r c))))))) 
|#
(define funky-bsu\0\377\377\207\0\377\377\206\0\377\377\206\0\377\377\207\0\377\377u\0\377\377O\0\377\377 \0\377\377\0\0\377\202\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\t\0\0\377\344\0\0\377\377\24\0\377\377w\0\377\377\251\0\377\377\336\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\377\0\377\377\336\0\377\377\237\0\377\377w\0\377\377\24\0\377\344\0\0\377\t\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\36\0\0\377\377\0\0\377\377F\0\377\377\226\0\377\377\360\0\377\366\377\0\377\223\366\0\377[\351\0\377/\340\0\3771\340\0\3771\340\0\377/\340\0\377[\351\0\377\223\366\0\377\366\377\0\377\377\360\0\377\377\226\0\377\377F\0\377\377\0\0\377\36\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\n\0\0\377\377\0\0\377\377P\0\377\377\261\0\377\377\377\0\377\223\366\0\3773\343\0\377O\353n\377f\364\343\377r\370\377\377s\372\377\377s\372\377\377r\370\377\377f\364\343\377O\353n\3773\343\0\377\223\366\0\377\377\377\0\377\377\261\0\377\377P\0\377\377\0\0\377\n\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\344\0\0\377\377F\0\377\377\261\0\377\377\377\0\377Y\352\0\377G\350F\377o\370\377\377=\265\377\377\5p\377\377\0B\377\377\0D\377\377\0D\377\377\0B\377\377\5p\377\377=\264\377\377o\370\377\377G\350F\377Y\352\0\377\377\377\0\377\377\261\0\377\377F\0\377\344\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\202\0\0\377\377\24\0\377\377\226\0\377\377\377\0\377Y\352\0\377M\352Y\377b\344\377\377\0c\377\377\"1\377\377\233\16\377\377\361\0\377\377\357\0\377\377\357\0\377\377\361\0\377\377\233\16\377\377\"1\377\377\0c\377\377b\344\377\377M\352Y\377Y\352\0\377\377\377\0\377\377\226\0\377\377\24\0\377\202\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\0\0\377\377w\0\377\377\360\0\377\223\366\0\377G\350F\377b\344\377\377\0M\377\377\214\23\377\377\355\0\377\377\222\0\244\377)\0/\377\0\0\0\377\0\0\0\377)\0/\377\222\0\244\377\356\0\377\377z\31\377\377\0M\377\377b\344\377\377G\350F\377\223\366\0\377\377\360\0\377\377w\0\377\377\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377Z\0\0\377\377 \0\377\377\237\0\377\366\377\0\3773\343\0\377o\370\377\377\0c\377\377z\31\377\377\352\0\377\377\25\0\30\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\25\0\30\377\353\0\377\377z\31\377\377\0c\377\377o\370\377\3773\343\0\377\366\377\0\377\377\237\0\377\377 \0\377Z\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\272\0\0\377\377O\0\377\377\336\0\377\222\366\0\377O\353m\377=\264\377\377\"1\377\377\356\0\377\377\25\0\31\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\26\0\31\377\357\0\377\377\"1\377\377=\264\377\377O\353m\377\222\366\0\377\377\336\0\377\377O\0\377\272\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\0\0\377\377u\0\377\377\377\0\377[\351\0\377f\364\342\377\5p\377\377\233\16\377\377\222\0\243\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\223\0\241\377\235\v\377\377\6o\377\377f\364\343\377[\351\0\377\377\377\0\377\377u\0\377\377\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\0\0\377\377\207\0\377\377\377\0\3770\341\0\377s\371\377\377\0B\377\377\362\0\377\377*\0000\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\e\0\35\377\370\0\377\377\0:\377\377q\367\377\377/\340\0\377\377\377\0\377\377\207\0\377\377\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\0\0\377\377\206\0\377\377\377\0\3779\343\17\377j\355\377\377\0C\377\377\364\0\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377,Vo\377Q\250\330\377K\253\326\377F\263\324\377X\250\326\377\32o\357\377n\365\377\3770\341\0\377\377\377\0\377\377\206\0\377\377\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\0\0\377\377\206\0\377\377\377\0\3772\341\0\377j\353\377\377\0<\377\377\372\0\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377L\230\304\377\214\304\345\377\374\375\377\377\377\377\377\377\377\377\377\377\374\377\376\377\216\305\345\377W\260\363\377.\343\0\377\377\377\0\377\377\206\0\377\377\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\0\0\377\377\207\0\377\377\377\0\377/\342\0\377n\365\377\377\32o\357\377Z\244\327\377K\254\326\377N\247\327\377Q\247\330\377,Vn\377\0\0\0\377\0\0\0\377)Ph\377\211\304\344\377\377\377\377\377\341\371\377\377\316\364\377\377\316\364\377\377\341\371\377\377\377\377\377\377\210\300\361\377:\302l\377\377\377\0\377\377\206\0\377\377\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\377\0\0\377\377u\0\377\377\377\0\377Z\354\0\377Q\260\337\377\215\304\346\377\374\377\376\377\377\377\377\377\377\377\377\377\374\375\377\377\214\304\345\377E\215\266\377T\247\330\377c\257\335\377\344\366\376\377\304\361\377\377\266\355\377\377\267\355\377\377\267\355\377\377\266\355\377\377\304\361\377\377\345\366\377\377E\245\334\377\377\377\0\377\377k\0\377\377\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\272\0\0\377\377M\0\377\377\336\0\377\224\324f\377\204\300\361\377\377\377\377\377\341\371\377\377\316\364\377\377\316\364\377\377\341\371\377\377\377\377\377\377\206\302\344\377\230\316\353\377\363\377\377\377\317\363\377\377\260\351\377\377\261\351\377\377\261\351\377\377\261\351\377\377\260\351\377\377\257\351\377\377\321\365\377\377Y\252\343\377E\244\350\377D\254\356\377W\241\325\377\a\20\25\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377W\0\0\377\3346*\377M\252\343\377Z\255\352\377\342\364\377\377\303\361\377\377\266\355\377\377\267\355\377\377\267\355\377\377\266\355\377\377\304\361\377\377\345\366\376\377R\246\327\377\272\360\377\377\254\353\377\377\254\351\377\377\253\350\377\377\252\347\377\377\251\346\377\377\251\346\377\377\250\346\377\377\262\352\377\377\311\354\376\377\335\371\377\377\336\374\377\377\274\347\374\377]\255\333\377\v\26\34\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377O\251\336\377\315\365\377\377\355\377\377\377\314\362\377\377\257\351\377\377\260\351\377\377\261\351\377\377\261\351\377\377\260\351\377\377\257\351\377\377\321\365\377\377S\245\326\377K\240\324\377K\240\323\377W\251\332\377\225\333\371\377\243\345\377\377\242\344\377\377\241\343\377\377\241\343\377\377\237\343\377\377\264\351\377\377\251\345\377\377\251\346\377\377\277\357\377\377\230\323\360\377B~\240\377\0\0\0\377\0\0\0\377\0\0\0\3771f\203\377K\260\343\377u\304\353\377\311\364\377\377\261\351\377\377\247\346\377\377\250\346\377\377\251\346\377\377\251\346\377\377\251\346\377\377\251\346\377\377\250\346\377\377\262\352\377\377\311\354\374\377\336\371\377\377\337\371\377\377\273\343\367\377[\252\332\377\216\326\371\377\233\341\377\377\232\340\377\377\231\340\377\377\231\337\377\377\231\337\377\377\230\337\377\377\230\337\377\377\231\341\377\377\255\347\377\377X\250\330\377\0\0\0\377\0\0\0\3775e\200\377r\272\343\377\305\361\377\377\311\363\377\377\245\345\377\377\237\343\377\377\240\343\377\377\241\343\377\377\241\343\377\377\241\343\377\377\241\343\377\377\241\343\377\377\241\343\377\377\237\343\377\377\264\351\377\377\251\345\377\377\251\346\377\377\276\356\377\377\225\320\356\377fpu
(define funky (make-image 32 32))
(send funky set-argb-pixels 0 0 32 32 funky-bs)
(define funky-ls (image->list funky))

(cout "Images to lists and lists to images")
(time
 (test-begin
  (for ((times (in-range 0 1000)))
    (let ((r (+ 1 (random 10)))(c (+ 1 (random 10))))
      (let* ((img (make-image r c (color (random 256) (random 256) (random 256))))
             (ls (image->list img)))
        (check = (image-rows img) r)
        (check = (image-cols img) c)
        (check = (length ls) (* c r))
        (define i 0)
        (for ((clr ls))
          (check color-equal? clr (image-ref img (quotient i c) (modulo i c)))
          (set! i (+ i 1)))
        (check image-equal? (list->image c ls) img))))))
          